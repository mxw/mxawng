/*
 * rhythm.scss - vertical rhythm based on rem units
 */

@use 'sass:math';

//-----------------------------------------------------------------------------
// units

$default-font-size: 16px;

// warn unless the units for $number are $unit
@function enforce-unit($number, $unit) {
  @if not unit($number) == $unit {
    @warn "all numbers should be given in rems"
  }
  @return 0;
}

// strip units from a number
@function strip-units($number) {
  @return math.div($number, ($number * 0 + 1));
}

// interconvert rem and px, assuming $default-font-size at the root
@function rem-to-px($number) {
  $_: enforce-unit($number, "rem");
  @return $default-font-size * strip-units($number);
}
@function px-to-rem($number) {
  $_: enforce-unit($number, "px");
  @return 1rem * math.div($number, $default-font-size);
}

//-----------------------------------------------------------------------------
// math

$rhythm: 1rem !default;
$px: px-to-rem(1px);

// simple function to compute line-height from $line count
@function rh($lines, $offset: 0rem) {
  @return $lines * $rhythm - $offset;
}

$min-line-padding: math.div(1rem, 8) !default;

// calculate the minimum number of lines needed for a given $font-size, based
// on the global $min-line-padding.  lines can be partitioned into sub-lines.
@function lines-for-font-size($font-size, $subdiv: 1) {
  $_: enforce-unit($font-size, "rem");

  $lines: math.div(
    math.ceil(math.div($subdiv * $font-size, $rhythm)),
    $subdiv
  );

  @if $lines * $rhythm - $font-size < $min-line-padding * 2 {
    $lines: $lines + math.div(1, $subdiv);
  }
  @return $lines;
}

//-----------------------------------------------------------------------------
// mixins

// adjust font-size and line-height while maintaining vertical rhythm
@mixin rhythm(
    $size,
    $subdiv: 1,
    $lines: lines-for-font-size($size, $subdiv),
    $offset: 0rem) {
  $_: enforce-unit($size, "rem");
  font-size: rem-to-px($size);
  font-size: $size;
  line-height: rh($lines, $offset);
}

// leader and trailer application
@mixin leader($lines: 1, $property: margin) {
  #{$property}-top: rh($lines);
}
@mixin trailer($lines: 1, $property: margin) {
  #{$property}-bottom: rh($lines);
}
@mixin margins($lines: 1) {
  margin-top: rh($lines);
  margin-bottom: rh($lines);
}
@mixin padding($lines: 1) {
  padding-top: rh($lines);
  padding-bottom: rh($lines);
}

$default-border-width: math.div(1rem, 16) !default;

// borders
@mixin border($side, $lines: 1, $width: $default-border-width) {
  border-#{$side}-width: $width;
  padding-#{$side}: rh($lines, $offset: $width);
}
